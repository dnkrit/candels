from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from app.states.registration_states import Registration
from app.keyboards.main_menu_kb import get_main_menu
from app.database.session import SessionLocal
from app.database.models import User

router = Router()

# === –®–∞–≥ 1. –°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
@router.message(Command("start"))
async def start_registration(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await state.set_state(Registration.enter_name)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! ‚ú® –Ø –ê–≥–Ω–µ–≤–∏–¥—Ü–∞.\n–ö–∞–∫ —Ç–≤–æ—ë –∏–º—è, –ø—É—Ç–Ω–∏–∫ —Å–≤–µ—Ç–∞?")

# === –®–∞–≥ 2. –ò–º—è ===
@router.message(Registration.enter_name)
async def get_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    await state.update_data(name=name)
    await state.set_state(Registration.enter_birthdate)
    await message.answer("–ó–∞–ø–æ–º–Ω–∏–ª–∞ üåô\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")

# === –®–∞–≥ 3. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è ===
@router.message(Registration.enter_birthdate)
async def get_birthdate(message: types.Message, state: FSMContext):
    birthdate = message.text.strip()
    await state.update_data(birthdate=birthdate)
    await state.set_state(Registration.enter_city)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ üîÆ\n–¢–µ–ø–µ—Ä—å –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:")

# === –®–∞–≥ 4. –ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è ===
@router.message(Registration.enter_city)
async def get_city(message: types.Message, state: FSMContext):
    city = message.text.strip()
    data = await state.update_data(city=city)

    text = (
        f"‚ú® –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ò–º—è: {data['name']}\n"
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birthdate']}\n"
        f"–ì–æ—Ä–æ–¥: {data['city']}\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏ ‚úÖ –∏–ª–∏ ¬´–î–∞¬ª.\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏ ‚úèÔ∏è –∏–ª–∏ ¬´–ù–µ—Ç¬ª."
    )

    await state.set_state(Registration.confirm_data)
    await message.answer(text)

# === –®–∞–≥ 5. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ===
@router.message(Registration.confirm_data)
async def confirm_data(message: types.Message, state: FSMContext):
    text = message.text.lower().strip()

    if text in ["‚úÖ", "–¥–∞", "–≤–µ—Ä–Ω–æ", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é"]:
        data = await state.get_data()

        with SessionLocal() as db:
            user = User(
                first_name=data["name"],
                birth_date=data["birthdate"],
                birth_place=data["city"]
            )
            db.add(user)
            db.commit()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (ReplyKeyboard)
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–∞–≥ —Å–≤–µ—Ç–∞ üî•\n"
            "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–Ω–µ–º:",
            reply_markup=get_main_menu()
        )

        await state.clear()

    elif text in ["‚úèÔ∏è", "–Ω–µ—Ç", "–∏–∑–º–µ–Ω–∏—Ç—å"]:
        await state.set_state(Registration.enter_name)
        await message.answer("–•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ ‚ú®\n–ö–∞–∫ —Ç–≤–æ—ë –∏–º—è?")

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å ¬´–î–∞¬ª –∏–ª–∏ ¬´–ù–µ—Ç¬ª (–∏–ª–∏ –≤—ã–±–µ—Ä–∏ —Å–∏–º–≤–æ–ª—ã ‚úÖ / ‚úèÔ∏è).")
