"""
FSM-—Ö–µ–Ω–¥–ª–µ—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Candels Bot (–æ–±–Ω–æ–≤–ª–µ–Ω–æ).
"""

from datetime import datetime
import re
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from app.states.registration_states import Registration
from app.keyboards.main_menu_kb import get_main_menu
from app.database.session import SessionLocal
from app.database.models import User

router = Router()


@router.message(CommandStart())
async def start_cmd(message: types.Message, state: FSMContext):
    await message.answer(
        "‚ú® –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –ø—É—Ç–Ω–∏–∫ —Å–≤–µ—Ç–∞!\n"
        "–Ø ‚Äî –ê–≥–Ω–µ–≤–∏–¥—Ü–∞. –ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ —Å–≤–µ—á—É —Å–∏–ª—ã, –ø–æ–≤–µ–¥–∞–π —Å–≤–æ—ë –∏–º—è."
    )
    await state.set_state(Registration.enter_name)


@router.message(Registration.enter_name)
async def get_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name.isalpha():
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üå∏")
        return
    await state.update_data(name=name)
    await state.set_state(Registration.enter_birthdate)
    await message.answer("üìÖ –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")


@router.message(Registration.enter_birthdate)
async def get_birthdate(message: types.Message, state: FSMContext):
    birthdate_text = message.text.strip()
    try:
        birthdate = datetime.strptime(birthdate_text, "%d.%m.%Y").date()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì üåô")
        return

    await state.update_data(birthdate=birthdate)
    await state.set_state(Registration.enter_city)
    await message.answer("üèô –£–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:")


@router.message(Registration.enter_city)
async def get_city(message: types.Message, state: FSMContext):
    city = message.text.strip()
    if len(city) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(city=city)

    data = await state.get_data()
    name, birthdate, city = data["name"], data["birthdate"], data["city"]

    await message.answer(
        f"üåï –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"–ò–º—è: <b>{name}</b>\n"
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: <b>{birthdate.strftime('%d.%m.%Y')}</b>\n"
        f"–ì–æ—Ä–æ–¥: <b>{city}</b>\n\n"
        f"–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–ø–∏—à–∏ <b>–î–∞</b>, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî <b>–ù–µ—Ç</b>.",
        parse_mode="HTML"
    )
    await state.set_state(Registration.confirm_data)


@router.message(Registration.confirm_data)
async def confirm_data(message: types.Message, state: FSMContext):
    text = message.text.strip().lower()

    if text in ["–¥–∞", "‚úÖ", "–≤–µ—Ä–Ω–æ"]:
        data = await state.get_data()

        with SessionLocal() as db:
            user = User(
                telegram_id=str(message.from_user.id),
                telegram_username=message.from_user.username,
                created_at=datetime.utcnow(),
            )
            db.add(user)
            db.commit()

        await state.clear()
        await message.answer(
            f"üåü –ë–ª–∞–≥–æ–¥–∞—Ä—é, <b>{data['name']}</b>!\n"
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ö—Ä–∞–º —Å–≤–µ—á–µ–π Candels üî•",
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )

    elif text in ["–Ω–µ—Ç", "‚úèÔ∏è"]:
        await message.answer("üí´ –•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞. –ö–∞–∫ —Ç–≤–æ—ë –∏–º—è?")
        await state.set_state(Registration.enter_name)

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å <b>–î–∞</b> –∏–ª–∏ <b>–ù–µ—Ç</b>.", parse_mode="HTML")
